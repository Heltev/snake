# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from snakebot_propulsion_control/PropulsionEffort.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class PropulsionEffort(genpy.Message):
  _md5sum = "3445f8426e3fc7aaf9a644a7c0e2c955"
  _type = "snakebot_propulsion_control/PropulsionEffort"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time pubTime

float64 effort
int32 jointNum
"""
  __slots__ = ['pubTime','effort','jointNum']
  _slot_types = ['time','float64','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pubTime,effort,jointNum

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PropulsionEffort, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pubTime is None:
        self.pubTime = genpy.Time()
      if self.effort is None:
        self.effort = 0.
      if self.jointNum is None:
        self.jointNum = 0
    else:
      self.pubTime = genpy.Time()
      self.effort = 0.
      self.jointNum = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2Idi.pack(_x.pubTime.secs, _x.pubTime.nsecs, _x.effort, _x.jointNum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pubTime is None:
        self.pubTime = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.pubTime.secs, _x.pubTime.nsecs, _x.effort, _x.jointNum,) = _struct_2Idi.unpack(str[start:end])
      self.pubTime.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2Idi.pack(_x.pubTime.secs, _x.pubTime.nsecs, _x.effort, _x.jointNum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pubTime is None:
        self.pubTime = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 20
      (_x.pubTime.secs, _x.pubTime.nsecs, _x.effort, _x.jointNum,) = _struct_2Idi.unpack(str[start:end])
      self.pubTime.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2Idi = struct.Struct("<2Idi")
