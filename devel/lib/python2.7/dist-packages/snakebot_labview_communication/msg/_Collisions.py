# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from snakebot_labview_communication/Collisions.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Collisions(genpy.Message):
  _md5sum = "5a020c7661cba7bfda797d36d1f6a250"
  _type = "snakebot_labview_communication/Collisions"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Collision data as given by the snakebot_collisions node.
# Can also be used to send data from snakebot_pushpoints

# Message formatted for easier extraction of data on LabVIEW side

float64[] position_x
float64[] position_y
float64[] position_z

int32[] link_numbers

string[] contact_sides

float64[] normal_x
float64[] normal_y
float64[] normal_z

float64[] tangent_x
float64[] tangent_y
float64[] tangent_z

float64[] force_x
float64[] force_y
float64[] force_z
"""
  __slots__ = ['position_x','position_y','position_z','link_numbers','contact_sides','normal_x','normal_y','normal_z','tangent_x','tangent_y','tangent_z','force_x','force_y','force_z']
  _slot_types = ['float64[]','float64[]','float64[]','int32[]','string[]','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       position_x,position_y,position_z,link_numbers,contact_sides,normal_x,normal_y,normal_z,tangent_x,tangent_y,tangent_z,force_x,force_y,force_z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Collisions, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.position_x is None:
        self.position_x = []
      if self.position_y is None:
        self.position_y = []
      if self.position_z is None:
        self.position_z = []
      if self.link_numbers is None:
        self.link_numbers = []
      if self.contact_sides is None:
        self.contact_sides = []
      if self.normal_x is None:
        self.normal_x = []
      if self.normal_y is None:
        self.normal_y = []
      if self.normal_z is None:
        self.normal_z = []
      if self.tangent_x is None:
        self.tangent_x = []
      if self.tangent_y is None:
        self.tangent_y = []
      if self.tangent_z is None:
        self.tangent_z = []
      if self.force_x is None:
        self.force_x = []
      if self.force_y is None:
        self.force_y = []
      if self.force_z is None:
        self.force_z = []
    else:
      self.position_x = []
      self.position_y = []
      self.position_z = []
      self.link_numbers = []
      self.contact_sides = []
      self.normal_x = []
      self.normal_y = []
      self.normal_z = []
      self.tangent_x = []
      self.tangent_y = []
      self.tangent_z = []
      self.force_x = []
      self.force_y = []
      self.force_z = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.position_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.position_x))
      length = len(self.position_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.position_y))
      length = len(self.position_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.position_z))
      length = len(self.link_numbers)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.link_numbers))
      length = len(self.contact_sides)
      buff.write(_struct_I.pack(length))
      for val1 in self.contact_sides:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.normal_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.normal_x))
      length = len(self.normal_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.normal_y))
      length = len(self.normal_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.normal_z))
      length = len(self.tangent_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.tangent_x))
      length = len(self.tangent_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.tangent_y))
      length = len(self.tangent_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.tangent_z))
      length = len(self.force_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.force_x))
      length = len(self.force_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.force_y))
      length = len(self.force_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.force_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_y = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_z = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.link_numbers = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contact_sides = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.contact_sides.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.normal_x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.normal_y = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.normal_z = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.tangent_x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.tangent_y = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.tangent_z = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.force_x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.force_y = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.force_z = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.position_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.position_x.tostring())
      length = len(self.position_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.position_y.tostring())
      length = len(self.position_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.position_z.tostring())
      length = len(self.link_numbers)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.link_numbers.tostring())
      length = len(self.contact_sides)
      buff.write(_struct_I.pack(length))
      for val1 in self.contact_sides:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.normal_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.normal_x.tostring())
      length = len(self.normal_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.normal_y.tostring())
      length = len(self.normal_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.normal_z.tostring())
      length = len(self.tangent_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.tangent_x.tostring())
      length = len(self.tangent_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.tangent_y.tostring())
      length = len(self.tangent_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.tangent_z.tostring())
      length = len(self.force_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.force_x.tostring())
      length = len(self.force_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.force_y.tostring())
      length = len(self.force_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.force_z.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_x = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.position_z = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.link_numbers = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.contact_sides = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.contact_sides.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.normal_x = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.normal_y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.normal_z = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.tangent_x = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.tangent_y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.tangent_z = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.force_x = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.force_y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.force_z = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
