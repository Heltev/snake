// Generated by gencpp from file snakebot_labview_communication/Collisions.msg
// DO NOT EDIT!


#ifndef SNAKEBOT_LABVIEW_COMMUNICATION_MESSAGE_COLLISIONS_H
#define SNAKEBOT_LABVIEW_COMMUNICATION_MESSAGE_COLLISIONS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace snakebot_labview_communication
{
template <class ContainerAllocator>
struct Collisions_
{
  typedef Collisions_<ContainerAllocator> Type;

  Collisions_()
    : position_x()
    , position_y()
    , position_z()
    , link_numbers()
    , contact_sides()
    , normal_x()
    , normal_y()
    , normal_z()
    , tangent_x()
    , tangent_y()
    , tangent_z()
    , force_x()
    , force_y()
    , force_z()  {
    }
  Collisions_(const ContainerAllocator& _alloc)
    : position_x(_alloc)
    , position_y(_alloc)
    , position_z(_alloc)
    , link_numbers(_alloc)
    , contact_sides(_alloc)
    , normal_x(_alloc)
    , normal_y(_alloc)
    , normal_z(_alloc)
    , tangent_x(_alloc)
    , tangent_y(_alloc)
    , tangent_z(_alloc)
    , force_x(_alloc)
    , force_y(_alloc)
    , force_z(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _position_x_type;
  _position_x_type position_x;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _position_y_type;
  _position_y_type position_y;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _position_z_type;
  _position_z_type position_z;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _link_numbers_type;
  _link_numbers_type link_numbers;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _contact_sides_type;
  _contact_sides_type contact_sides;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _normal_x_type;
  _normal_x_type normal_x;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _normal_y_type;
  _normal_y_type normal_y;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _normal_z_type;
  _normal_z_type normal_z;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tangent_x_type;
  _tangent_x_type tangent_x;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tangent_y_type;
  _tangent_y_type tangent_y;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tangent_z_type;
  _tangent_z_type tangent_z;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _force_x_type;
  _force_x_type force_x;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _force_y_type;
  _force_y_type force_y;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _force_z_type;
  _force_z_type force_z;




  typedef boost::shared_ptr< ::snakebot_labview_communication::Collisions_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::snakebot_labview_communication::Collisions_<ContainerAllocator> const> ConstPtr;

}; // struct Collisions_

typedef ::snakebot_labview_communication::Collisions_<std::allocator<void> > Collisions;

typedef boost::shared_ptr< ::snakebot_labview_communication::Collisions > CollisionsPtr;
typedef boost::shared_ptr< ::snakebot_labview_communication::Collisions const> CollisionsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::snakebot_labview_communication::Collisions_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::snakebot_labview_communication::Collisions_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace snakebot_labview_communication

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'snakebot_labview_communication': ['/home/snake/Documents/catkin_ws/src/snakebot_labview_communication/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::snakebot_labview_communication::Collisions_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::snakebot_labview_communication::Collisions_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::snakebot_labview_communication::Collisions_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::snakebot_labview_communication::Collisions_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snakebot_labview_communication::Collisions_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snakebot_labview_communication::Collisions_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::snakebot_labview_communication::Collisions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5a020c7661cba7bfda797d36d1f6a250";
  }

  static const char* value(const ::snakebot_labview_communication::Collisions_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5a020c7661cba7bfULL;
  static const uint64_t static_value2 = 0xda797d36d1f6a250ULL;
};

template<class ContainerAllocator>
struct DataType< ::snakebot_labview_communication::Collisions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "snakebot_labview_communication/Collisions";
  }

  static const char* value(const ::snakebot_labview_communication::Collisions_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::snakebot_labview_communication::Collisions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Collision data as given by the snakebot_collisions node.\n\
# Can also be used to send data from snakebot_pushpoints\n\
\n\
# Message formatted for easier extraction of data on LabVIEW side\n\
\n\
float64[] position_x\n\
float64[] position_y\n\
float64[] position_z\n\
\n\
int32[] link_numbers\n\
\n\
string[] contact_sides\n\
\n\
float64[] normal_x\n\
float64[] normal_y\n\
float64[] normal_z\n\
\n\
float64[] tangent_x\n\
float64[] tangent_y\n\
float64[] tangent_z\n\
\n\
float64[] force_x\n\
float64[] force_y\n\
float64[] force_z\n\
";
  }

  static const char* value(const ::snakebot_labview_communication::Collisions_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::snakebot_labview_communication::Collisions_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position_x);
      stream.next(m.position_y);
      stream.next(m.position_z);
      stream.next(m.link_numbers);
      stream.next(m.contact_sides);
      stream.next(m.normal_x);
      stream.next(m.normal_y);
      stream.next(m.normal_z);
      stream.next(m.tangent_x);
      stream.next(m.tangent_y);
      stream.next(m.tangent_z);
      stream.next(m.force_x);
      stream.next(m.force_y);
      stream.next(m.force_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Collisions_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::snakebot_labview_communication::Collisions_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::snakebot_labview_communication::Collisions_<ContainerAllocator>& v)
  {
    s << indent << "position_x[]" << std::endl;
    for (size_t i = 0; i < v.position_x.size(); ++i)
    {
      s << indent << "  position_x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position_x[i]);
    }
    s << indent << "position_y[]" << std::endl;
    for (size_t i = 0; i < v.position_y.size(); ++i)
    {
      s << indent << "  position_y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position_y[i]);
    }
    s << indent << "position_z[]" << std::endl;
    for (size_t i = 0; i < v.position_z.size(); ++i)
    {
      s << indent << "  position_z[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position_z[i]);
    }
    s << indent << "link_numbers[]" << std::endl;
    for (size_t i = 0; i < v.link_numbers.size(); ++i)
    {
      s << indent << "  link_numbers[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.link_numbers[i]);
    }
    s << indent << "contact_sides[]" << std::endl;
    for (size_t i = 0; i < v.contact_sides.size(); ++i)
    {
      s << indent << "  contact_sides[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.contact_sides[i]);
    }
    s << indent << "normal_x[]" << std::endl;
    for (size_t i = 0; i < v.normal_x.size(); ++i)
    {
      s << indent << "  normal_x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.normal_x[i]);
    }
    s << indent << "normal_y[]" << std::endl;
    for (size_t i = 0; i < v.normal_y.size(); ++i)
    {
      s << indent << "  normal_y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.normal_y[i]);
    }
    s << indent << "normal_z[]" << std::endl;
    for (size_t i = 0; i < v.normal_z.size(); ++i)
    {
      s << indent << "  normal_z[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.normal_z[i]);
    }
    s << indent << "tangent_x[]" << std::endl;
    for (size_t i = 0; i < v.tangent_x.size(); ++i)
    {
      s << indent << "  tangent_x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tangent_x[i]);
    }
    s << indent << "tangent_y[]" << std::endl;
    for (size_t i = 0; i < v.tangent_y.size(); ++i)
    {
      s << indent << "  tangent_y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tangent_y[i]);
    }
    s << indent << "tangent_z[]" << std::endl;
    for (size_t i = 0; i < v.tangent_z.size(); ++i)
    {
      s << indent << "  tangent_z[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tangent_z[i]);
    }
    s << indent << "force_x[]" << std::endl;
    for (size_t i = 0; i < v.force_x.size(); ++i)
    {
      s << indent << "  force_x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.force_x[i]);
    }
    s << indent << "force_y[]" << std::endl;
    for (size_t i = 0; i < v.force_y.size(); ++i)
    {
      s << indent << "  force_y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.force_y[i]);
    }
    s << indent << "force_z[]" << std::endl;
    for (size_t i = 0; i < v.force_z.size(); ++i)
    {
      s << indent << "  force_z[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.force_z[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SNAKEBOT_LABVIEW_COMMUNICATION_MESSAGE_COLLISIONS_H
