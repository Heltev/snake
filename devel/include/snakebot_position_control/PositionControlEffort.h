// Generated by gencpp from file snakebot_position_control/PositionControlEffort.msg
// DO NOT EDIT!


#ifndef SNAKEBOT_POSITION_CONTROL_MESSAGE_POSITIONCONTROLEFFORT_H
#define SNAKEBOT_POSITION_CONTROL_MESSAGE_POSITIONCONTROLEFFORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace snakebot_position_control
{
template <class ContainerAllocator>
struct PositionControlEffort_
{
  typedef PositionControlEffort_<ContainerAllocator> Type;

  PositionControlEffort_()
    : pubTime()
    , arraySize(0)
    , effort()  {
    }
  PositionControlEffort_(const ContainerAllocator& _alloc)
    : pubTime()
    , arraySize(0)
    , effort(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _pubTime_type;
  _pubTime_type pubTime;

   typedef int32_t _arraySize_type;
  _arraySize_type arraySize;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _effort_type;
  _effort_type effort;




  typedef boost::shared_ptr< ::snakebot_position_control::PositionControlEffort_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::snakebot_position_control::PositionControlEffort_<ContainerAllocator> const> ConstPtr;

}; // struct PositionControlEffort_

typedef ::snakebot_position_control::PositionControlEffort_<std::allocator<void> > PositionControlEffort;

typedef boost::shared_ptr< ::snakebot_position_control::PositionControlEffort > PositionControlEffortPtr;
typedef boost::shared_ptr< ::snakebot_position_control::PositionControlEffort const> PositionControlEffortConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::snakebot_position_control::PositionControlEffort_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::snakebot_position_control::PositionControlEffort_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace snakebot_position_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'snakebot_position_control': ['/home/snake/Documents/catkin_ws/src/snakebot_position_control/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::snakebot_position_control::PositionControlEffort_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::snakebot_position_control::PositionControlEffort_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::snakebot_position_control::PositionControlEffort_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::snakebot_position_control::PositionControlEffort_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snakebot_position_control::PositionControlEffort_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snakebot_position_control::PositionControlEffort_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::snakebot_position_control::PositionControlEffort_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ca9559c8310a9ed8cb203d8a67e1f66e";
  }

  static const char* value(const ::snakebot_position_control::PositionControlEffort_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xca9559c8310a9ed8ULL;
  static const uint64_t static_value2 = 0xcb203d8a67e1f66eULL;
};

template<class ContainerAllocator>
struct DataType< ::snakebot_position_control::PositionControlEffort_<ContainerAllocator> >
{
  static const char* value()
  {
    return "snakebot_position_control/PositionControlEffort";
  }

  static const char* value(const ::snakebot_position_control::PositionControlEffort_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::snakebot_position_control::PositionControlEffort_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time pubTime\n\
int32 arraySize\n\
float64[] effort\n\
";
  }

  static const char* value(const ::snakebot_position_control::PositionControlEffort_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::snakebot_position_control::PositionControlEffort_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pubTime);
      stream.next(m.arraySize);
      stream.next(m.effort);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PositionControlEffort_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::snakebot_position_control::PositionControlEffort_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::snakebot_position_control::PositionControlEffort_<ContainerAllocator>& v)
  {
    s << indent << "pubTime: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.pubTime);
    s << indent << "arraySize: ";
    Printer<int32_t>::stream(s, indent + "  ", v.arraySize);
    s << indent << "effort[]" << std::endl;
    for (size_t i = 0; i < v.effort.size(); ++i)
    {
      s << indent << "  effort[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.effort[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SNAKEBOT_POSITION_CONTROL_MESSAGE_POSITIONCONTROLEFFORT_H
