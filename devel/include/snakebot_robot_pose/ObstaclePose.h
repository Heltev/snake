// Generated by gencpp from file snakebot_robot_pose/ObstaclePose.msg
// DO NOT EDIT!


#ifndef SNAKEBOT_ROBOT_POSE_MESSAGE_OBSTACLEPOSE_H
#define SNAKEBOT_ROBOT_POSE_MESSAGE_OBSTACLEPOSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose2D.h>

namespace snakebot_robot_pose
{
template <class ContainerAllocator>
struct ObstaclePose_
{
  typedef ObstaclePose_<ContainerAllocator> Type;

  ObstaclePose_()
    : name()
    , number()
    , pose()  {
    }
  ObstaclePose_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , number(_alloc)
    , pose(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _name_type;
  _name_type name;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _number_type;
  _number_type number;

   typedef std::vector< ::geometry_msgs::Pose2D_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose2D_<ContainerAllocator> >::other >  _pose_type;
  _pose_type pose;




  typedef boost::shared_ptr< ::snakebot_robot_pose::ObstaclePose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::snakebot_robot_pose::ObstaclePose_<ContainerAllocator> const> ConstPtr;

}; // struct ObstaclePose_

typedef ::snakebot_robot_pose::ObstaclePose_<std::allocator<void> > ObstaclePose;

typedef boost::shared_ptr< ::snakebot_robot_pose::ObstaclePose > ObstaclePosePtr;
typedef boost::shared_ptr< ::snakebot_robot_pose::ObstaclePose const> ObstaclePoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::snakebot_robot_pose::ObstaclePose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::snakebot_robot_pose::ObstaclePose_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace snakebot_robot_pose

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'snakebot_robot_pose': ['/home/snake/Documents/catkin_ws/src/snakebot_robot_pose/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::snakebot_robot_pose::ObstaclePose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::snakebot_robot_pose::ObstaclePose_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::snakebot_robot_pose::ObstaclePose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::snakebot_robot_pose::ObstaclePose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snakebot_robot_pose::ObstaclePose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snakebot_robot_pose::ObstaclePose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::snakebot_robot_pose::ObstaclePose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "342328e409d059b7deefb6a0a8b8c299";
  }

  static const char* value(const ::snakebot_robot_pose::ObstaclePose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x342328e409d059b7ULL;
  static const uint64_t static_value2 = 0xdeefb6a0a8b8c299ULL;
};

template<class ContainerAllocator>
struct DataType< ::snakebot_robot_pose::ObstaclePose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "snakebot_robot_pose/ObstaclePose";
  }

  static const char* value(const ::snakebot_robot_pose::ObstaclePose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::snakebot_robot_pose::ObstaclePose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] name                 # obstacle names\n\
int32[] number								# obstacle numbers\n\
geometry_msgs/Pose2D[] pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
";
  }

  static const char* value(const ::snakebot_robot_pose::ObstaclePose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::snakebot_robot_pose::ObstaclePose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.number);
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstaclePose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::snakebot_robot_pose::ObstaclePose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::snakebot_robot_pose::ObstaclePose_<ContainerAllocator>& v)
  {
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "number[]" << std::endl;
    for (size_t i = 0; i < v.number.size(); ++i)
    {
      s << indent << "  number[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.number[i]);
    }
    s << indent << "pose[]" << std::endl;
    for (size_t i = 0; i < v.pose.size(); ++i)
    {
      s << indent << "  pose[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "    ", v.pose[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SNAKEBOT_ROBOT_POSE_MESSAGE_OBSTACLEPOSE_H
