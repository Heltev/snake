// Generated by gencpp from file snakebot_propulsion_control/PropulsionEffort.msg
// DO NOT EDIT!


#ifndef SNAKEBOT_PROPULSION_CONTROL_MESSAGE_PROPULSIONEFFORT_H
#define SNAKEBOT_PROPULSION_CONTROL_MESSAGE_PROPULSIONEFFORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace snakebot_propulsion_control
{
template <class ContainerAllocator>
struct PropulsionEffort_
{
  typedef PropulsionEffort_<ContainerAllocator> Type;

  PropulsionEffort_()
    : pubTime()
    , effort(0.0)
    , jointNum(0)  {
    }
  PropulsionEffort_(const ContainerAllocator& _alloc)
    : pubTime()
    , effort(0.0)
    , jointNum(0)  {
  (void)_alloc;
    }



   typedef ros::Time _pubTime_type;
  _pubTime_type pubTime;

   typedef double _effort_type;
  _effort_type effort;

   typedef int32_t _jointNum_type;
  _jointNum_type jointNum;




  typedef boost::shared_ptr< ::snakebot_propulsion_control::PropulsionEffort_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::snakebot_propulsion_control::PropulsionEffort_<ContainerAllocator> const> ConstPtr;

}; // struct PropulsionEffort_

typedef ::snakebot_propulsion_control::PropulsionEffort_<std::allocator<void> > PropulsionEffort;

typedef boost::shared_ptr< ::snakebot_propulsion_control::PropulsionEffort > PropulsionEffortPtr;
typedef boost::shared_ptr< ::snakebot_propulsion_control::PropulsionEffort const> PropulsionEffortConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::snakebot_propulsion_control::PropulsionEffort_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::snakebot_propulsion_control::PropulsionEffort_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace snakebot_propulsion_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'snakebot_propulsion_control': ['/home/snake/Documents/catkin_ws/src/snakebot_propulsion_control/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::snakebot_propulsion_control::PropulsionEffort_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::snakebot_propulsion_control::PropulsionEffort_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::snakebot_propulsion_control::PropulsionEffort_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::snakebot_propulsion_control::PropulsionEffort_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snakebot_propulsion_control::PropulsionEffort_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::snakebot_propulsion_control::PropulsionEffort_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::snakebot_propulsion_control::PropulsionEffort_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3445f8426e3fc7aaf9a644a7c0e2c955";
  }

  static const char* value(const ::snakebot_propulsion_control::PropulsionEffort_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3445f8426e3fc7aaULL;
  static const uint64_t static_value2 = 0xf9a644a7c0e2c955ULL;
};

template<class ContainerAllocator>
struct DataType< ::snakebot_propulsion_control::PropulsionEffort_<ContainerAllocator> >
{
  static const char* value()
  {
    return "snakebot_propulsion_control/PropulsionEffort";
  }

  static const char* value(const ::snakebot_propulsion_control::PropulsionEffort_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::snakebot_propulsion_control::PropulsionEffort_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time pubTime\n\
\n\
float64 effort\n\
int32 jointNum\n\
";
  }

  static const char* value(const ::snakebot_propulsion_control::PropulsionEffort_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::snakebot_propulsion_control::PropulsionEffort_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pubTime);
      stream.next(m.effort);
      stream.next(m.jointNum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PropulsionEffort_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::snakebot_propulsion_control::PropulsionEffort_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::snakebot_propulsion_control::PropulsionEffort_<ContainerAllocator>& v)
  {
    s << indent << "pubTime: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.pubTime);
    s << indent << "effort: ";
    Printer<double>::stream(s, indent + "  ", v.effort);
    s << indent << "jointNum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.jointNum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SNAKEBOT_PROPULSION_CONTROL_MESSAGE_PROPULSIONEFFORT_H
